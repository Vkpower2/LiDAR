# -*- coding: utf-8 -*-
"""major project last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Qlpb-U0k4p5IUZv5U4SDWAHsIib42LG
"""

import numpy as np
import matplotlib.pyplot as plt

# Read the data from the file
with open('/content/final2-1-11_07_56.csv', 'r') as file:
    numbers = file.read().split()

# Remove empty strings and whitespace characters
numbers = [x for x in numbers if x.strip()]

# Assuming the width and height of the image are known
width = 10
height = 10

# Reshape the numbers into a 2D NumPy array
data = np.array([int(x) for x in numbers])
data = data[:width * height]  # Trim excess numbers if needed
data = data.reshape((height, width))

# Plot the data as an image
plt.imshow(data, cmap='viridis')
plt.colorbar()
plt.show()

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt

# Read the data from the file
with open('/content/-10_48_58.txt', 'r') as file:
    numbers = file.read().split()

# Remove empty strings and whitespace characters
numbers = [x for x in numbers if x.strip()]

# Assuming the width and height of the image are known
width = 10
height = 10

# Reshape the numbers into a 2D NumPy array
data = np.array([float(x) for x in numbers])
data = data[:width * height]  # Trim excess numbers if needed
data = data.reshape((height, width))

# Plot the data as an image
plt.imshow(data)
plt.colorbar()
plt.show()

# prompt: generate a code so that i can convert all the lidar data the i got that is in the form of numbers to a 3d image

import numpy as np
import matplotlib.pyplot as plt

# Read the data from the file
with open('/content/-10_48_58.txt', 'r') as file:
    numbers = file.read().split()

# Remove empty strings and whitespace characters
numbers = [x for x in numbers if x.strip()]

# Assuming the width, height, and depth of the 3D image are known
width = 10
height = 10
depth = 10

# Reshape the numbers into a 3D NumPy array
data = np.array([float(x) for x in numbers])
data = data[:width * height * depth]  # Trim excess numbers if needed
data = data.reshape((depth, height, width))

# Plot the data as a 3D image
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111, projection='3d')
ax.voxels(data, edgecolor="k")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
data = np.loadtxt('/content/-10_48_58.txt')
distance = data[:, 0]
strength = data[:, 1]
reserved = data[:, 2]
plt.figure(figsize=(10, 6))
plt.scatter(distance, strength, c=reserved, cmap='viridis', s=10)
plt.colorbar(label='Reserved Value')
plt.xlabel('Distance')
plt.ylabel('Strength')
plt.title('Lidar Data Visualization')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read data from the text file
data = pd.read_csv("/content/-10_48_58.txt", delimiter='\t')  # Adjust delimiter if necessary

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Reserved')
plt.xlabel('Dist')
plt.ylabel('Strength')
plt.title('Dist vs Strength with Reserved')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read data from the text file
data = pd.read_csv("/content/-10_48_58.txt", delimiter='\t')  # Adjust delimiter if necessary

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Reserved')
plt.xlabel('Dist')
plt.ylabel('Strength')
plt.title('Dist vs Strength with Reserved')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read data from the text file
data = pd.read_csv("/content/-10_48_58.csv", delimiter='')  # Adjust delimiter if necessary

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Reserved')
plt.xlabel('Distance')
plt.ylabel('Strength')
plt.title('Lidar Data Visualization')
plt.grid(True)
plt.show()

import pandas as pd

# Read the first few lines of the CSV file to detect the delimiter
with open("/content/-10_48_58.csv", 'r') as file:
    first_lines = [file.readline() for _ in range(25)]

# Print the first few lines to inspect
for line in first_lines:
    print(line)

import pandas as pd
import matplotlib.pyplot as plt

# Read data from the CSV file with space delimiter
data = pd.read_csv("/content/-10_48_58.csv", delimiter='\s+')

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Reserved')
plt.xlabel('Dist')
plt.ylabel('Strength')
plt.title('Lidar Data Visualization')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

def visualize_lidar_data(csv_file):
    # Read data from the CSV file with space delimiter
    data = pd.read_csv(csv_file, delimiter='\s+')

    # Plotting
    plt.figure(figsize=(10, 6))
    plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
    plt.colorbar(label='Reserved')
    plt.xlabel('Dist')
    plt.ylabel('Strength')
    plt.title('Lidar Data Visualization')
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    csv_file = "/content/-10_48_58.csv"  # Replace with the actual filename of your CSV file
    visualize_lidar_data(csv_file)

import pandas as pd
import matplotlib.pyplot as plt

def save_lidar_image(csv_file, output_image):
    # Read data from the CSV file with space delimiter
    data = pd.read_csv(csv_file, delimiter='\s+')

    # Plotting
    plt.figure(figsize=(10, 6))
    plt.scatter(data['Dist'], data['Strength'], c=data['Reserved'], cmap='viridis', alpha=0.7)
    plt.colorbar(label='Reserved')
    plt.xlabel('Dist')
    plt.ylabel('Strength')
    plt.title('Lidar Data Visualization')
    plt.grid(True)
    plt.savefig(output_image)  # Save the plot as an image file
    plt.close()  # Close the plot to free up resources

if __name__ == "__main__":
    csv_file = "/content/-10_48_58.csv"  # Replace with the actual filename of your CSV file
    output_image = "/content/out"  # Specify the output image filename
    save_lidar_image(csv_file, output_image)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read data from the CSV file
data = pd.read_csv("/content/final2-2-11_36_43.csv", delimiter='\s+')

# Assuming the Lidar was held parallel to the object and moved horizontally
# Horizontal angle is assumed to be 90 degrees
horizontal_angle = np.full_like(data['Dist'], 90)

# Vertical angle is assumed to be 90 degrees
vertical_angle = np.full_like(horizontal_angle, 90)

# Convert angles to radians
horizontal_angle_rad = np.radians(horizontal_angle)
vertical_angle_rad = np.radians(vertical_angle)

# Distance measurements
distance = data['Dist']

# Convert distance measurements to X, Y, Z coordinates
X = distance * np.cos(vertical_angle_rad) * np.sin(horizontal_angle_rad)
Y = distance * np.cos(vertical_angle_rad) * np.cos(horizontal_angle_rad)
Z = distance * np.sin(vertical_angle_rad)

# Plot the 3D point cloud
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X, Y, Z, c='b', marker='o')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Lidar Data 3D Point Cloud')
plt.show()
print(distance)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read data from the CSV file, skipping the first row
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', skiprows=1, header=None, names=['Dist', 'Strength', 'Reserved'])

# Reset index
data.reset_index(drop=True, inplace=True)

# Adjust width and height according to the dimensions of your data
width = 3  # Number of columns
height = len(data)  # Number of rows

# Generate depth map
depth_map = data['Dist'].values.reshape((height, width))

# Visualize depth map
plt.imshow(depth_map, cmap='gray')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()

# Generate 3D map
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map

# Visualize 3D map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd

data = pd.read_csv("/content/-10_48_58.csv", delimiter='\s+', header=None, names=['Dist', 'Strength', 'Reserved'])
height, width = data.shape
print("Number of rows (height):", height)
print("Number of columns (width):", width)

print(data.head())

print("Number of rows in DataFrame:", len(data))
print("Number of elements in 'Dist' column:", len(data['Dist']))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/-10_48_58.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-1-11_07_56.csv",delimiter='\s+', header=0)
print(data.head())
x = data['Dist']
y = data['Strength']
z = data['Reserved']
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c=z, cmap='viridis')
ax.set_xlabel('Dist')
ax.set_ylabel('Strength')
ax.set_zlabel('Reserved')
ax.set_title('Point Cloud')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-2-11_36_43.csv",delimiter='\s+', header=0)
print(data.head())
x = data['Dist']
y = data['Strength']
z = data['Reserved']
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c=z, cmap='viridis')
ax.set_xlabel('Dist')
ax.set_ylabel('Strength')
ax.set_zlabel('Reserved')
ax.set_title('Point Cloud')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the data
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', header=0)

# Extract the 'Strength' column as the depth information
depth_map_2d = data['Strength'].values.reshape(-1, 1)  # Reshape to a 2D array

# Plot the 2D depth map
plt.imshow(depth_map_2d, cmap='gray', aspect='auto')
plt.colorbar(label='Strength')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('2D Depth Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Read the data
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', header=0)

# Extract the 'Strength' column as the depth information
depth_map_2d = data['Strength'].values.reshape(-1, 1)  # Reshape to a 2D array

# Normalize the depth values to range [0, 1]
depth_min = np.min(depth_map_2d)
depth_max = np.max(depth_map_2d)
depth_map_normalized = (depth_map_2d - depth_min) / (depth_max - depth_min)

# Assign colors to the depth values (here, we use a colormap)
cmap = 'viridis'  # You can choose any other colormap
depth_colored = plt.get_cmap(cmap)(depth_map_normalized)

# Plot the colored image
plt.imshow(depth_colored, aspect='auto')
plt.colorbar(label='Strength')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Colored Depth Image')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

# Read data
data = pd.read_csv("/content/final2-1-11_07_56.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)

# Prepare data for interpolation
x = data['X'].values
y = data['Y'].values
z = data['Z'].values

# Define grid
x_grid = np.linspace(min(x), max(x), 100)
y_grid = np.linspace(min(y), max(y), 100)
X, Y = np.meshgrid(x_grid, y_grid)

# Interpolate data onto grid
Z_grid = griddata((x, y), z, (X, Y), method='cubic')

# Plot surface
plt.figure()
plt.contourf(X, Y, Z_grid, cmap='viridis')
plt.colorbar(label='Z')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('2D Surface Plot')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-2-11_36_43.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/final2-2-11_36_43.csv",delimiter='\s+', header=0)
print(data.head())
x = data['Dist']
y = data['Strength']
z = data['Reserved']
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c=z, cmap='viridis')
ax.set_xlabel('Dist')
ax.set_ylabel('Strength')
ax.set_zlabel('Reserved')
ax.set_title('Point Cloud')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+', header=0)
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('3D Map')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read the data
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+', header=0)

# Remove non-numeric rows
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)

# Convert columns to numeric
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)

# Reshape the data into a 2D array
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape

# Generate the depth map plot
plt.imshow(depth_map, cmap='gray', aspect='auto')
plt.colorbar(label='Distance')
plt.xlabel('Column')
plt.ylabel('Row')
plt.title('Depth Map')
plt.show()

# Generate the point cloud from the depth map
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X, Y, Z)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Distance')
ax.set_title('Point Cloud')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
data = pd.read_csv("/content/Final-new-1-10_21_25.csv",delimiter='\s+', header=0)
print(data.head())
x = data['Dist']
y = data['Strength']
z = data['Reserved']
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z, c=z, cmap='viridis')
ax.set_xlabel('Dist')
ax.set_ylabel('Strength')
ax.set_zlabel('Reserved')
ax.set_title('Point Cloud')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read the data from the CSV file
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+')

# Extract the columns
distances = data['Dist']
strengths = data['Strength']
reserved = data['Reserved']

# Create a 3D scatter plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(distances, strengths, reserved, c='b', marker='.')
ax.set_xlabel('Distance')
ax.set_ylabel('Strength')
ax.set_zlabel('Reserved')
plt.title('Point Cloud')
plt.show()

import pandas as pd

# Read the data from the CSV file
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+')

# Extract the columns
distances = data['Dist']
strengths = data['Strength']
reserved = data['Reserved']

# Write the data to a CSV file with X, Y, and Z coordinates
with open("/content/point_cloud1.csv", "w") as f:
    f.write("X,Y,Z\n")  # Header
    for i in range(len(distances)):
        f.write("{},{},{}\n".format(distances[i], strengths[i], reserved[i]))

print("Point cloud CSV file generated successfully.")

import pandas as pd
import numpy as np

# Read the data
data = pd.read_csv("/content/Final-new-1-10_21_25.csv", delimiter='\s+', header=0)

# Remove non-numeric rows
data = data.drop(index=data[data['Dist'] == 'Dist'].index)
data = data.reset_index(drop=True)

# Convert columns to numeric
data[['Dist', 'Strength', 'Reserved']] = data[['Dist', 'Strength', 'Reserved']].apply(pd.to_numeric)

# Reshape the data into a 2D array
depth_map = data[['Dist', 'Strength', 'Reserved']].values
height, width = depth_map.shape

# Generate the point cloud from the depth map
x = np.arange(width)
y = np.arange(height)
X, Y = np.meshgrid(x, y)
Z = depth_map

# Create a DataFrame for point cloud data
point_cloud_data = pd.DataFrame({'X': X.flatten(), 'Y': Y.flatten(), 'Z': Z.flatten()})

# Write the point cloud data to a CSV file
point_cloud_data.to_csv('point_cloud.csv', index=False)

print("Point cloud CSV file generated successfully.")



import laspy
import pandas as pd

# Read the CSV file
data = pd.read_csv("/content/point_cloud1.csv")

# Create a new LAS file
outfile = laspy.create(point_format=1)  # Point format 1 for XYZ data

# Add point data to the LAS file
outfile.x = data['X']
outfile.y = data['Y']
outfile.z = data['Z']

# Save the LAS file
outfile.write("point_cloud1_output.las")

pip install pandas plyfile

import os
import laspy

# Function to convert LAS to PLY
def convert_las_to_ply(las_file, output_folder):
    # Read the LAS file
    infile = laspy.read(las_file)

    # Create a new LAS file
    outfile = laspy.create(point_format=1)  # Point format 1 for XYZ data

    # Add point data to the LAS file
    outfile.x = infile.x
    outfile.y = infile.y
    outfile.z = infile.z

    # Save the PLY file
    filename = os.path.splitext(os.path.basename(las_file))[0] + ".ply"
    ply_file = os.path.join(output_folder, filename)
    outfile.write(ply_file)
    print(f"{las_file} converted to {filename}")

# Input and output folders
input_folder = "/content/drive/MyDrive/Point_clouds/Line-3"
output_folder = "/content/drive/MyDrive/line-3 "

# Iterate over LAS files in the input folder
for file in os.listdir(input_folder):
    if file.endswith(".las"):
        las_file = os.path.join(input_folder, file)
        convert_las_to_ply(las_file, output_folder)

pip install open3d

import pandas as pd

# Input and output file paths
input_file_path = '/content/drive/MyDrive/Circle_back_tin/c12-10_47_30.txt'
output_file_path = '/content/drive/MyDrive/Circle_back_tin_1/c12.csv'

# Read the text file into a DataFrame
data = pd.read_csv(input_file_path, delimiter='\s+')

# Write the DataFrame to a CSV file
data.to_csv(output_file_path, index=False)

print(f"Converted {input_file_path} to CSV: {output_file_path}")

import os
import pandas as pd
input_dir = '/content/drive/MyDrive/Reverse_Tin_3'
output_dir = '/content/drive/MyDrive/Reverse_Tin_@'


os.makedirs(output_dir, exist_ok=True)


file_list = os.listdir(input_dir)


for file_name in file_list:
    if file_name.endswith('.txt'):

        input_file_path = os.path.join(input_dir, file_name)
        output_file_path = os.path.join(output_dir, file_name[:-4] + '.csv')


        data = pd.read_csv(input_file_path, delimiter='\s+')


        data.to_csv(output_file_path, index=False)

        print(f"Converted {file_name} to CSV: {output_file_path}")

import os
import pandas as pd
import numpy as np


input_folder = "/content/drive/MyDrive/Tin_full_new_3"
output_folder = "/content/drive/MyDrive/line-28"


os.makedirs(output_folder, exist_ok=True)


for filename in os.listdir(input_folder):
    if filename.endswith(".csv"):

        file_path = os.path.join(input_folder, filename)
        data = pd.read_csv(file_path, header=None)


        data = data.drop(index=data[data[0] == 'Dist'].index)
        data = data.reset_index(drop=True)


        data[[0, 1, 2]] = data[[0, 1, 2]].apply(lambda x: x.str.replace(',', '')).astype(int)


        depth_map = data[[0, 1, 2]].values
        height, width = depth_map.shape


        x = np.arange(width)
        y = np.arange(height)
        X, Y = np.meshgrid(x, y)
        Z = depth_map

        point_cloud_data = pd.DataFrame({'X': X.flatten(), 'Y': Y.flatten(), 'Z': Z.flatten()})


        output_file_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_point_cloud.csv")
        point_cloud_data.to_csv(output_file_path, index=False)

        print(f"Point cloud CSV file generated successfully: {output_file_path}")

import os
import pandas as pd
import numpy as np


input_folder = "/content/drive/MyDrive/Reverse_Tin_@"
output_folder = "/content/drive/MyDrive/Reverse_Tin_3_point_cloud"


os.makedirs(output_folder, exist_ok=True)


for filename in os.listdir(input_folder):
    if filename.endswith(".csv"):

        file_path = os.path.join(input_folder, filename)
        data = pd.read_csv(file_path, header=None)


        data = data.drop(index=data[data[0] == 'Dist'].index)
        data = data.reset_index(drop=True)


        data[[0, 1, 2]] = data[[0, 1, 2]].apply(lambda x: x.str.replace(',', '')).astype(int)


        depth_map = data[[0, 1, 2]].values
        height, width = depth_map.shape

        x = np.arange(width)
        y = np.arange(height)
        X, Y = np.meshgrid(x, y)
        Z = depth_map


        point_cloud_data = pd.DataFrame({'X': X.flatten(), 'Y': Y.flatten(), 'Z': Z.flatten()})


        output_file_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_point_cloud.csv")
        point_cloud_data.to_csv(output_file_path, index=False)

        print(f"Point cloud CSV file generated successfully: {output_file_path}")

pip install laspy

import os
import pandas as pd
import laspy


input_folder = "/content/drive/MyDrive/Reverse_Tin_3_point_cloud"
output_folder = "/content/drive/MyDrive/Reverse_Tin_3_LAS"


os.makedirs(output_folder, exist_ok=True)


for filename in os.listdir(input_folder):
    if filename.endswith(".csv"):

        file_path = os.path.join(input_folder, filename)
        data = pd.read_csv(file_path)


        outfile = laspy.create(point_format=1)


        outfile.x = data['X']
        outfile.y = data['Y']
        outfile.z = data['Z']


        output_file_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_output.las")
        outfile.write(output_file_path)

        print(f"LAS file generated successfully: {output_file_path}")

import os
import laspy
import geopandas as gpd


input_folder = '/content/drive/MyDrive/Reverse_Tin_3_LAS'
output_folder = '/content/drive/MyDrive/Reverse_Tin_3_SHP'


os.makedirs(output_folder, exist_ok=True)


for file_name in os.listdir(input_folder):
    if file_name.endswith(".las"):

        in_file = os.path.join(input_folder, file_name)
        in_las = laspy.read(in_file)


        x = in_las.x
        y = in_las.y
        z = in_las.z


        gdf = gpd.GeoDataFrame(geometry=gpd.points_from_xy(x, y, z))


        out_file = os.path.join(output_folder, file_name.replace(".las", ".shp"))
        gdf.to_file(out_file)

        print(f"Converted {file_name} to {out_file}")

